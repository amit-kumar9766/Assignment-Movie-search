{"version":3,"sources":["components/Card.js","components/Dropdown.js","components/Favorites.js","components/LandingPage.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","src","movieId","movieName","year","type","useState","favourite","setFavourite","useEffect","x","localStorage","getItem","JSON","parse","map","i","className","alt","Button","variant","onClick","e","preventDefault","fav","fav1","mapped","ele","console","log","includes","filter","el","push","setItem","stringify","onClickFavorite","Drpdown","loading","value","setValue","data","nodata","undefined","Type","style","padding","NativeSelect","id","onChange","target","dt","Poster","imdbID","Title","Year","Favorites","setData","arr","renderCards","favorite","index","key","paddingRight","LandingPage","setNodata","setLoading","searchTerm","setSearchTerm","error","setError","page","endpoint","handleSubmit","fetch","then","result","json","Response","catch","fetchMovies","marginTop","Container","Row","Col","xs","md","onSubmit","border","height","width","marginRight","marginLeft","borderRadius","margin","search","placeholder","backgroundColor","Search","NavbarPage","collapseOnSelect","expand","fixed","to","Toggle","aria-controls","Collapse","Nav","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.133e329b.chunk.js","sourcesContent":["import React,{useEffect, useState} from 'react';\nimport './Card.css'\n// import { Route, Switch ,Link} from \"react-router-dom\";\n//import Card from 'react-bootstrap/Card'\nimport {Button} from '@material-ui/core';\n\nfunction Card(props) {\n    const {src,movieId,movieName,year,type}=props;\n    \n    const [favourite,setFavourite]=useState(false)\n    const [ids,setIds]=useState([])\n\n    \n    \n    const onClickFavorite=(e)=>{\n        \n        e.preventDefault()\n        setFavourite(!favourite)\n       \n        //setIds([...ids,movieId])\n       // console.log(movieId)\n        let fav=localStorage.getItem('id')\n        \n        let fav1=JSON.parse(fav)||[]\n        \n        let mapped=fav1.map(ele => ele.movieId)\n        console.log(mapped)\n        if(mapped.includes( movieId)){\n              console.log('favbefore',fav1)\n              fav1=fav1.filter( el => el.movieId!= movieId )\n            //   const index=fav1.findIndex(id => id === {movieId,movieName,type} )\n            //   console.log('index',index)\n            //   fav1.splice(index,1)\n              console.log('favourate',fav1)\n        }\n        //})\n        else\n        {fav1.push({movieId,movieName,type})}\n        \n    \n        \n        localStorage.setItem('id',JSON.stringify(fav1))\n\n        \n    }\n\n\n    useEffect(()=>{\n       const x= localStorage.getItem('id')\n       const arr=JSON.parse(x)||[]\n       arr.map((x,i)=>{\n           if(x.movieId===movieId){\n               setFavourite(true)\n           }\n       })\n    \n    },[])\n    \n    return (\n       \n        \n    \n        <div className='card'>\n            <img src={src} alt=\"No image found\"  />\n            <div className=\"card__info\">\n\n                {/* <h3>{movieId}</h3>  */}\n                <h3>{movieName}</h3>\n                <h2>{year}</h2>\n                <h4>{type}</h4>\n                <form >\n                <Button variant=\"contained\" className=\"btn__fav\" onClick={(e)=>onClickFavorite(e)} > {!favourite ? \"Add to Favorite\" : \"Not Favorite\"} </Button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React,{useEffect, useState} from 'react';\nimport { Select } from '@material-ui/core';\nimport { NativeSelect } from '@material-ui/core';\nimport Card from './Card';\nimport './Dropdown.css';\n\nconst Drpdown=(props)=>{\n    const {loading} =props\n  \n    const [value,setValue]=useState(0);\n\n    const handleChange=(e)=>{\n       setValue(e.target.value)\n    }\n    \n    var {data,nodata}=props;\n   // console.log(data)\n    if (data!==undefined ){\n    if (value==='1'){\n        console.log('inside 1')\n        data=data.filter(el => el.Type==='movie')\n    }\n    else if (value==='2'){\n        data=data.filter(el => el.Type==='series')\n    }\n    else if (value==='3'){\n        data=data.filter(el => el.Type==='episodes')\n    }\n   }\n  \n\n    useEffect(()=>{\n\n    },[value])\n\n   if ( nodata ){\n     return (\n        <h5 style={{padding:'30px'}}>No Data Found...Please search Again!!</h5>\n    )\n   }\n\n   else if (!loading ){\n        return (<>  loading...   </>)\n    }\n    \n    \n    return(\n        \n    <>\n       <div className=\"select__area\">\n        <NativeSelect id=\"select\" onChange={handleChange}>\n            <option value=\"0\" >All</option>\n            <option value=\"1\" >Movies</option>\n            <option value=\"2\" >Series</option>\n            <option value=\"3\">Episodes</option>\n\n        </NativeSelect>\n     </div>\n      \n      <div className=\"home__section\">\n        \n     \n    \n      {data && data.map((dt,i)=>{return(\n            <>\n           <Card\n              src={dt.Poster}\n              movieId={dt.imdbID}\n              movieName={dt.Title}\n              type={dt.Type}\n              year={dt.Year}\n          />\n            </>\n        )})\n        \n  \n        }\n        </div>\n    </>\n\n    )\n\n}\n\nexport default Drpdown;","import { Divider } from '@material-ui/core';\nimport React, { useEffect,useState } from 'react';\nimport './common.css'\n\nconst Favorites=(props)=>{\n    const [data,setData]=useState([]);\n\n    useEffect(()=>{\n        const x= localStorage.getItem('id')\n        var arr=JSON.parse(x)||[];\n        setData(arr)\n    },[])\n\n    const renderCards = data.map((favorite, index) => {\n\n\n        return <tr key={index}>\n                 \n                 <td>{favorite.movieId}</td>\n                <td>{favorite.movieName}</td>\n               \n                 <td>{favorite.type} </td>\n         \n                 </tr>\n    })\n  \n    console.log(data)\n    return (\n    <>\n        \n         {/* {data!==[] && data.map((x,i)=>{return ( */}\n                <div style={{}} className=\"fvrt-section\">\n                <h3 style={{padding:'30px'}}>Favourite Movies </h3>\n                   <table>\n                    <thead>\n                        <tr>\n                            <th><h5>MovieID</h5></th>\n                            <th style={{paddingRight:'50px'}}><h5>MovieTitle</h5></th>\n                            <th><h5>Type</h5></th>\n                            \n                        </tr>\n                    </thead>\n                    <tbody>\n                        {renderCards}\n                    </tbody>\n                </table>\n                </div>\n           \n    </>\n    )\n\n}\n\nexport default Favorites;","import React ,{useState,useEffect} from 'react';\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Drpdown from './Dropdown';\nimport Favorites from './Favorites';\nimport './common.css'\nimport './LandingPage.css'\nimport { Button,Form,Container,Row,Col } from 'react-bootstrap';\n\n\n\nconst LandingPage=()=>{\n    const [data,setData]=useState('')\n    const [nodata, setNodata] = useState(false);\n    const [loading,setLoading]=useState(true)\n    const [searchTerm,setSearchTerm]=useState('')\n    const [error,setError]=useState(false);\n    const [page,setPage]=useState(1)\n   \n    const endpoint=`https://cors-anywhere.herokuapp.com/http://www.omdbapi.com/?apikey=e0df3e16&s=${searchTerm}&page=${page}`\n\n    const fetchMovies = (endpoint) => {\n         setLoading(false)\n\n        fetch(endpoint)\n            .then(result => result.json())\n            .then(result => {\n                \n               \n                if(result.Response === \"False\"){\n                    setNodata(true)\n                    return;\n                }\n                setData(result);\n                setNodata(false)\n                setLoading(true)\n            })\n\n            .catch(error => {\n                console.log('Error:', error)\n                setError(true)\n               setLoading(true)\n            }\n            )\n    }\n    const handleChange=(e)=>{\n        setSearchTerm(e.target.value)\n     \n    }\n    \n   \n    const handleSubmit=(e)=>{  \n    \n    e.preventDefault();\n    setSearchTerm('');\n    const loadData =  () => {\n        const newMovies = fetchMovies(endpoint);\n        \n        };\n    loadData();\n    \n\n    }\n\n    console.log(data)\n    \n\n     if (error){\n        return (<div style={{marginTop:'100px'}}>There is an error</div>)\n    }\n    \n    return (\n    <>\n    <section className=\"search-area\">\n    <Container>\n  \n  <Row>\n    <Col xs={12} md={12}>\n     \n    <form  className=\"header__search\"  onSubmit={handleSubmit} style={{border:'0.1px solid black'\n     ,height:'40px',width:'300px',marginRight:'auto',marginLeft:'auto',borderRadius:'5px'}}>\n        <input className=\"header__searchInput\" style={{margin:'20px'}}type=\"text\" onChange={handleChange} \n        search={searchTerm} value ={searchTerm} placeholder=\"Search movies,serials here\" />\n       \n        <SearchIcon className=\"header__searchIcon\" style={{backgroundColor:'#cd9042',height:'38px',width:'30px'}}\n        onClick={handleSubmit}/>\n        \n</form>\n    </Col>\n    \n  </Row>\n\n  <Drpdown data={data.Search}  nodata={nodata} loading={loading}/>    \n\n</Container>\n\n\n     \n     \n    </section>\n   \n     \n    \n    </>\n    )\n     \n\n}\n\nexport default LandingPage","import React from 'react';\nimport './Navbar.css';\nimport { Route, Switch ,Link} from \"react-router-dom\";\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav'\n\nconst NavbarPage=()=>{\n    return(\n\n        <Navbar collapseOnSelect expand=\"lg\" className=\"navbar-clr\" fixed=\"top\">\n          <div className=\"container\">\n          {/* <Navbar.Brand href=\"/\">Movies Search</Navbar.Brand> */}\n          <Link to=\"/Assignment-Movie-search\" className=\"search-link\"> Movie Search </Link>\n        \n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n         \n          \n          <Nav className=\"ml-auto\">\n             {/* <Nav.Link href=\"/favorites\">Favourite Movies</Nav.Link>  */}\n            <Link to=\"/favorites\" className=\"favourite-link\"> Favourites </Link>\n            \n          </Nav>\n        </Navbar.Collapse>\n          </div>\n      \n      </Navbar>\n\n    )}\n\nexport default NavbarPage;","import React from 'react';\nimport './App.css';\nimport LandingPage from './components/LandingPage.js';\nimport NavbarPage from './components/Navbar';\nimport Favorites from './components/Favorites';\nimport { Route, Switch ,Redirect} from \"react-router-dom\";\n\n\nfunction App() {\n  \n  return (\n    <div className=\"App\">\n    \n      <NavbarPage/>\n        \n      <Switch>\n      <Route exact path=\"/Assignment-Movie-search\" component={LandingPage} />\n      <Route exact path=\"/favorites\" component={Favorites} />\n      <Redirect to=\"/Assignment-Movie-search\"/>\n\n      </Switch>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <BrowserRouter>\n  <App />\n</BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}